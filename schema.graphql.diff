--- ./schema.graphql	2019-11-18 21:11:44.000000000 +0000
+++ ./schema.shopify.graphql	2019-11-18 21:11:44.000000000 +0000
@@ -9,10 +9,10 @@
   name: String!
 
   """Reads a single `Company` that is related to this `Beverage`."""
-  companyByCompanyId: Company
+  company: Company
 
   """Reads a single `Company` that is related to this `Beverage`."""
-  companyByDistributorId: Company
+  distributor: Company
 }
 
 """
@@ -33,6 +33,71 @@
   name: String
 }
 
+"""All input for the create `Beverage` mutation."""
+input BeverageCreateInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
+
+  """The `Beverage` to be created by this mutation."""
+  beverage: BeverageInput!
+}
+
+"""The output of our create `Beverage` mutation."""
+type BeverageCreatePayload {
+  """
+  The exact same `clientMutationId` that was provided in the mutation input,
+  unchanged and unused. May be used by a client to track mutations.
+  """
+  clientMutationId: String
+
+  """The `Beverage` that was created by this mutation."""
+  beverage: Beverage
+
+  """
+  Our root query field type. Allows us to run any query from our mutation payload.
+  """
+  query: Query
+
+  """Reads a single `Company` that is related to this `Beverage`."""
+  company: Company
+
+  """Reads a single `Company` that is related to this `Beverage`."""
+  distributor: Company
+
+  """An edge for our `Beverage`. May be used by Relay 1."""
+  beverageEdge(
+    """The method to use when ordering `Beverage`."""
+    orderBy: [BeveragesOrderBy!] = PRIMARY_KEY_ASC
+  ): BeveragesEdge
+}
+
+"""All input for the `beverageDeleteByNodeId` mutation."""
+input BeverageDeleteByNodeIdInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
+
+  """
+  The globally unique `ID` which will identify a single `Beverage` to be deleted.
+  """
+  nodeId: ID!
+}
+
+"""All input for the `beverageDelete` mutation."""
+input BeverageDeleteInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
+  id: Int!
+}
+
 """An input for mutations affecting `Beverage`"""
 input BeverageInput {
   id: Int
@@ -92,6 +157,40 @@
   PRIMARY_KEY_DESC
 }
 
+"""All input for the `beverageUpdateByNodeId` mutation."""
+input BeverageUpdateByNodeIdInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
+
+  """
+  The globally unique `ID` which will identify a single `Beverage` to be updated.
+  """
+  nodeId: ID!
+
+  """
+  An object where the defined keys will be set on the `Beverage` being updated.
+  """
+  patch: BeveragePatch!
+}
+
+"""All input for the `beverageUpdate` mutation."""
+input BeverageUpdateInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
+
+  """
+  An object where the defined keys will be set on the `Beverage` being updated.
+  """
+  patch: BeveragePatch!
+  id: Int!
+}
+
 """A connection to a list of `Company` values."""
 type CompaniesConnection {
   """A list of `Company` objects."""
@@ -138,7 +237,7 @@
   name: String!
 
   """Reads and enables pagination through a set of `Beverage`."""
-  beveragesByCompanyId(
+  beverages(
     """Only read the first `n` values of the set."""
     first: Int
 
@@ -207,63 +306,8 @@
   name: String
 }
 
-"""An input for mutations affecting `Company`"""
-input CompanyInput {
-  id: Int
-  name: String!
-}
-
-"""
-Represents an update to a `Company`. Fields that are set will be updated.
-"""
-input CompanyPatch {
-  id: Int
-  name: String
-}
-
-"""All input for the create `Beverage` mutation."""
-input CreateBeverageInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-
-  """The `Beverage` to be created by this mutation."""
-  beverage: BeverageInput!
-}
-
-"""The output of our create `Beverage` mutation."""
-type CreateBeveragePayload {
-  """
-  The exact same `clientMutationId` that was provided in the mutation input,
-  unchanged and unused. May be used by a client to track mutations.
-  """
-  clientMutationId: String
-
-  """The `Beverage` that was created by this mutation."""
-  beverage: Beverage
-
-  """
-  Our root query field type. Allows us to run any query from our mutation payload.
-  """
-  query: Query
-
-  """Reads a single `Company` that is related to this `Beverage`."""
-  companyByCompanyId: Company
-
-  """Reads a single `Company` that is related to this `Beverage`."""
-  companyByDistributorId: Company
-
-  """An edge for our `Beverage`. May be used by Relay 1."""
-  beverageEdge(
-    """The method to use when ordering `Beverage`."""
-    orderBy: [BeveragesOrderBy!] = PRIMARY_KEY_ASC
-  ): BeveragesEdge
-}
-
 """All input for the create `Company` mutation."""
-input CreateCompanyInput {
+input CompanyCreateInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
@@ -275,7 +319,7 @@
 }
 
 """The output of our create `Company` mutation."""
-type CreateCompanyPayload {
+type CompanyCreatePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
@@ -297,123 +341,65 @@
   ): CompaniesEdge
 }
 
-"""All input for the create `Fish` mutation."""
-input CreateFishInput {
+"""All input for the `companyDeleteByNodeId` mutation."""
+input CompanyDeleteByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
 
-  """The `Fish` to be created by this mutation."""
-  fish: FishInput!
-}
-
-"""The output of our create `Fish` mutation."""
-type CreateFishPayload {
-  """
-  The exact same `clientMutationId` that was provided in the mutation input,
-  unchanged and unused. May be used by a client to track mutations.
-  """
-  clientMutationId: String
-
-  """The `Fish` that was created by this mutation."""
-  fish: Fish
-
   """
-  Our root query field type. Allows us to run any query from our mutation payload.
+  The globally unique `ID` which will identify a single `Company` to be deleted.
   """
-  query: Query
-
-  """Reads a single `Pond` that is related to this `Fish`."""
-  pondByPondId: Pond
-
-  """An edge for our `Fish`. May be used by Relay 1."""
-  fishEdge(
-    """The method to use when ordering `Fish`."""
-    orderBy: [FishOrderBy!] = PRIMARY_KEY_ASC
-  ): FishEdge
+  nodeId: ID!
 }
 
-"""All input for the create `FooGenera` mutation."""
-input CreateFooGeneraInput {
+"""All input for the `companyDelete` mutation."""
+input CompanyDeleteInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
-
-  """The `FooGenera` to be created by this mutation."""
-  fooGenera: FooGeneraInput!
+  id: Int!
 }
 
-"""The output of our create `FooGenera` mutation."""
-type CreateFooGeneraPayload {
-  """
-  The exact same `clientMutationId` that was provided in the mutation input,
-  unchanged and unused. May be used by a client to track mutations.
-  """
-  clientMutationId: String
-
-  """The `FooGenera` that was created by this mutation."""
-  fooGenera: FooGenera
-
-  """
-  Our root query field type. Allows us to run any query from our mutation payload.
-  """
-  query: Query
+"""An input for mutations affecting `Company`"""
+input CompanyInput {
+  id: Int
+  name: String!
+}
 
-  """An edge for our `FooGenera`. May be used by Relay 1."""
-  fooGeneraEdge(
-    """The method to use when ordering `FooGenera`."""
-    orderBy: [FooGenerasOrderBy!] = PRIMARY_KEY_ASC
-  ): FooGenerasEdge
+"""
+Represents an update to a `Company`. Fields that are set will be updated.
+"""
+input CompanyPatch {
+  id: Int
+  name: String
 }
 
-"""All input for the create `Pond` mutation."""
-input CreatePondInput {
+"""All input for the `companyUpdateByNodeId` mutation."""
+input CompanyUpdateByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
 
-  """The `Pond` to be created by this mutation."""
-  pond: PondInput!
-}
-
-"""The output of our create `Pond` mutation."""
-type CreatePondPayload {
-  """
-  The exact same `clientMutationId` that was provided in the mutation input,
-  unchanged and unused. May be used by a client to track mutations.
-  """
-  clientMutationId: String
-
-  """The `Pond` that was created by this mutation."""
-  pond: Pond
-
   """
-  Our root query field type. Allows us to run any query from our mutation payload.
+  The globally unique `ID` which will identify a single `Company` to be updated.
   """
-  query: Query
-}
-
-"""A location in a connection that can be used for resuming pagination."""
-scalar Cursor
+  nodeId: ID!
 
-"""All input for the `deleteBeverageById` mutation."""
-input DeleteBeverageByIdInput {
   """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
+  An object where the defined keys will be set on the `Company` being updated.
   """
-  clientMutationId: String
-  id: Int!
+  patch: CompanyPatch!
 }
 
-"""All input for the `deleteBeverage` mutation."""
-input DeleteBeverageInput {
+"""All input for the `companyUpdate` mutation."""
+input CompanyUpdateInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
@@ -421,11 +407,15 @@
   clientMutationId: String
 
   """
-  The globally unique `ID` which will identify a single `Beverage` to be deleted.
+  An object where the defined keys will be set on the `Company` being updated.
   """
-  nodeId: ID!
+  patch: CompanyPatch!
+  id: Int!
 }
 
+"""A location in a connection that can be used for resuming pagination."""
+scalar Cursor
+
 """The output of our delete `Beverage` mutation."""
 type DeleteBeveragePayload {
   """
@@ -436,7 +426,7 @@
 
   """The `Beverage` that was deleted by this mutation."""
   beverage: Beverage
-  deletedBeverageId: ID
+  deletedBeverageNodeId: ID
 
   """
   Our root query field type. Allows us to run any query from our mutation payload.
@@ -444,10 +434,10 @@
   query: Query
 
   """Reads a single `Company` that is related to this `Beverage`."""
-  companyByCompanyId: Company
+  company: Company
 
   """Reads a single `Company` that is related to this `Beverage`."""
-  companyByDistributorId: Company
+  distributor: Company
 
   """An edge for our `Beverage`. May be used by Relay 1."""
   beverageEdge(
@@ -456,30 +446,6 @@
   ): BeveragesEdge
 }
 
-"""All input for the `deleteCompanyById` mutation."""
-input DeleteCompanyByIdInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-  id: Int!
-}
-
-"""All input for the `deleteCompany` mutation."""
-input DeleteCompanyInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-
-  """
-  The globally unique `ID` which will identify a single `Company` to be deleted.
-  """
-  nodeId: ID!
-}
-
 """The output of our delete `Company` mutation."""
 type DeleteCompanyPayload {
   """
@@ -490,7 +456,7 @@
 
   """The `Company` that was deleted by this mutation."""
   company: Company
-  deletedCompanyId: ID
+  deletedCompanyNodeId: ID
 
   """
   Our root query field type. Allows us to run any query from our mutation payload.
@@ -504,30 +470,6 @@
   ): CompaniesEdge
 }
 
-"""All input for the `deleteFishById` mutation."""
-input DeleteFishByIdInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-  id: Int!
-}
-
-"""All input for the `deleteFish` mutation."""
-input DeleteFishInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-
-  """
-  The globally unique `ID` which will identify a single `Fish` to be deleted.
-  """
-  nodeId: ID!
-}
-
 """The output of our delete `Fish` mutation."""
 type DeleteFishPayload {
   """
@@ -538,7 +480,7 @@
 
   """The `Fish` that was deleted by this mutation."""
   fish: Fish
-  deletedFishId: ID
+  deletedFishNodeId: ID
 
   """
   Our root query field type. Allows us to run any query from our mutation payload.
@@ -546,7 +488,7 @@
   query: Query
 
   """Reads a single `Pond` that is related to this `Fish`."""
-  pondByPondId: Pond
+  pond: Pond
 
   """An edge for our `Fish`. May be used by Relay 1."""
   fishEdge(
@@ -555,76 +497,28 @@
   ): FishEdge
 }
 
-"""All input for the `deleteFooGeneraById` mutation."""
-input DeleteFooGeneraByIdInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-  id: Int!
-}
-
-"""All input for the `deleteFooGenera` mutation."""
-input DeleteFooGeneraInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-
-  """
-  The globally unique `ID` which will identify a single `FooGenera` to be deleted.
-  """
-  nodeId: ID!
-}
-
-"""The output of our delete `FooGenera` mutation."""
-type DeleteFooGeneraPayload {
+"""The output of our delete `FooGenus` mutation."""
+type DeleteFooGenusPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String
 
-  """The `FooGenera` that was deleted by this mutation."""
-  fooGenera: FooGenera
-  deletedFooGeneraId: ID
+  """The `FooGenus` that was deleted by this mutation."""
+  fooGenus: FooGenus
+  deletedFooGenusNodeId: ID
 
   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query
 
-  """An edge for our `FooGenera`. May be used by Relay 1."""
-  fooGeneraEdge(
-    """The method to use when ordering `FooGenera`."""
-    orderBy: [FooGenerasOrderBy!] = PRIMARY_KEY_ASC
-  ): FooGenerasEdge
-}
-
-"""All input for the `deletePondById` mutation."""
-input DeletePondByIdInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-  id: Int!
-}
-
-"""All input for the `deletePond` mutation."""
-input DeletePondInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-
-  """
-  The globally unique `ID` which will identify a single `Pond` to be deleted.
-  """
-  nodeId: ID!
+  """An edge for our `FooGenus`. May be used by Relay 1."""
+  fooGenusEdge(
+    """The method to use when ordering `FooGenus`."""
+    orderBy: [FooGeneraOrderBy!] = PRIMARY_KEY_ASC
+  ): FooGeneraEdge
 }
 
 """The output of our delete `Pond` mutation."""
@@ -637,7 +531,7 @@
 
   """The `Pond` that was deleted by this mutation."""
   pond: Pond
-  deletedPondId: ID
+  deletedPondNodeId: ID
 
   """
   Our root query field type. Allows us to run any query from our mutation payload.
@@ -655,7 +549,7 @@
   name: String!
 
   """Reads a single `Pond` that is related to this `Fish`."""
-  pondByPondId: Pond
+  pond: Pond
 }
 
 """
@@ -689,6 +583,68 @@
   totalCount: Int!
 }
 
+"""All input for the create `Fish` mutation."""
+input FishCreateInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
+
+  """The `Fish` to be created by this mutation."""
+  fish: FishInput!
+}
+
+"""The output of our create `Fish` mutation."""
+type FishCreatePayload {
+  """
+  The exact same `clientMutationId` that was provided in the mutation input,
+  unchanged and unused. May be used by a client to track mutations.
+  """
+  clientMutationId: String
+
+  """The `Fish` that was created by this mutation."""
+  fish: Fish
+
+  """
+  Our root query field type. Allows us to run any query from our mutation payload.
+  """
+  query: Query
+
+  """Reads a single `Pond` that is related to this `Fish`."""
+  pond: Pond
+
+  """An edge for our `Fish`. May be used by Relay 1."""
+  fishEdge(
+    """The method to use when ordering `Fish`."""
+    orderBy: [FishOrderBy!] = PRIMARY_KEY_ASC
+  ): FishEdge
+}
+
+"""All input for the `fishDeleteByNodeId` mutation."""
+input FishDeleteByNodeIdInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
+
+  """
+  The globally unique `ID` which will identify a single `Fish` to be deleted.
+  """
+  nodeId: ID!
+}
+
+"""All input for the `fishDelete` mutation."""
+input FishDeleteInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
+  id: Int!
+}
+
 """A `Fish` edge in the connection."""
 type FishEdge {
   """A cursor for use in pagination."""
@@ -727,7 +683,78 @@
   name: String
 }
 
-type FooGenera implements Node {
+"""All input for the `fishUpdateByNodeId` mutation."""
+input FishUpdateByNodeIdInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
+
+  """
+  The globally unique `ID` which will identify a single `Fish` to be updated.
+  """
+  nodeId: ID!
+
+  """
+  An object where the defined keys will be set on the `Fish` being updated.
+  """
+  patch: FishPatch!
+}
+
+"""All input for the `fishUpdate` mutation."""
+input FishUpdateInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
+
+  """
+  An object where the defined keys will be set on the `Fish` being updated.
+  """
+  patch: FishPatch!
+  id: Int!
+}
+
+"""A connection to a list of `FooGenus` values."""
+type FooGeneraConnection {
+  """A list of `FooGenus` objects."""
+  nodes: [FooGenus]!
+
+  """
+  A list of edges which contains the `FooGenus` and cursor to aid in pagination.
+  """
+  edges: [FooGeneraEdge!]!
+
+  """Information to aid in pagination."""
+  pageInfo: PageInfo!
+
+  """The count of *all* `FooGenus` you could get from the connection."""
+  totalCount: Int!
+}
+
+"""A `FooGenus` edge in the connection."""
+type FooGeneraEdge {
+  """A cursor for use in pagination."""
+  cursor: Cursor
+
+  """The `FooGenus` at the end of the edge."""
+  node: FooGenus
+}
+
+"""Methods to use when ordering `FooGenus`."""
+enum FooGeneraOrderBy {
+  NATURAL
+  ID_ASC
+  ID_DESC
+  NAME_ASC
+  NAME_DESC
+  PRIMARY_KEY_ASC
+  PRIMARY_KEY_DESC
+}
+
+type FooGenus implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
@@ -737,10 +764,10 @@
 }
 
 """
-A condition to be used against `FooGenera` object types. All fields are tested
+A condition to be used against `FooGenus` object types. All fields are tested
 for equality and combined with a logical ‘and.’
 """
-input FooGeneraCondition {
+input FooGenusCondition {
   """Checks for equality with the object’s `id` field."""
   id: Int
 
@@ -748,55 +775,111 @@
   name: String
 }
 
-"""An input for mutations affecting `FooGenera`"""
-input FooGeneraInput {
+"""All input for the create `FooGenus` mutation."""
+input FooGenusCreateInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
+
+  """The `FooGenus` to be created by this mutation."""
+  fooGenus: FooGenusInput!
+}
+
+"""The output of our create `FooGenus` mutation."""
+type FooGenusCreatePayload {
+  """
+  The exact same `clientMutationId` that was provided in the mutation input,
+  unchanged and unused. May be used by a client to track mutations.
+  """
+  clientMutationId: String
+
+  """The `FooGenus` that was created by this mutation."""
+  fooGenus: FooGenus
+
+  """
+  Our root query field type. Allows us to run any query from our mutation payload.
+  """
+  query: Query
+
+  """An edge for our `FooGenus`. May be used by Relay 1."""
+  fooGenusEdge(
+    """The method to use when ordering `FooGenus`."""
+    orderBy: [FooGeneraOrderBy!] = PRIMARY_KEY_ASC
+  ): FooGeneraEdge
+}
+
+"""All input for the `fooGenusDeleteByNodeId` mutation."""
+input FooGenusDeleteByNodeIdInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
+
+  """
+  The globally unique `ID` which will identify a single `FooGenus` to be deleted.
+  """
+  nodeId: ID!
+}
+
+"""All input for the `fooGenusDelete` mutation."""
+input FooGenusDeleteInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
+  id: Int!
+}
+
+"""An input for mutations affecting `FooGenus`"""
+input FooGenusInput {
   id: Int
   name: String!
 }
 
 """
-Represents an update to a `FooGenera`. Fields that are set will be updated.
+Represents an update to a `FooGenus`. Fields that are set will be updated.
 """
-input FooGeneraPatch {
+input FooGenusPatch {
   id: Int
   name: String
 }
 
-"""A connection to a list of `FooGenera` values."""
-type FooGenerasConnection {
-  """A list of `FooGenera` objects."""
-  nodes: [FooGenera]!
-
+"""All input for the `fooGenusUpdateByNodeId` mutation."""
+input FooGenusUpdateByNodeIdInput {
   """
-  A list of edges which contains the `FooGenera` and cursor to aid in pagination.
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
   """
-  edges: [FooGenerasEdge!]!
+  clientMutationId: String
 
-  """Information to aid in pagination."""
-  pageInfo: PageInfo!
+  """
+  The globally unique `ID` which will identify a single `FooGenus` to be updated.
+  """
+  nodeId: ID!
 
-  """The count of *all* `FooGenera` you could get from the connection."""
-  totalCount: Int!
+  """
+  An object where the defined keys will be set on the `FooGenus` being updated.
+  """
+  patch: FooGenusPatch!
 }
 
-"""A `FooGenera` edge in the connection."""
-type FooGenerasEdge {
-  """A cursor for use in pagination."""
-  cursor: Cursor
-
-  """The `FooGenera` at the end of the edge."""
-  node: FooGenera
-}
+"""All input for the `fooGenusUpdate` mutation."""
+input FooGenusUpdateInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
 
-"""Methods to use when ordering `FooGenera`."""
-enum FooGenerasOrderBy {
-  NATURAL
-  ID_ASC
-  ID_DESC
-  NAME_ASC
-  NAME_DESC
-  PRIMARY_KEY_ASC
-  PRIMARY_KEY_DESC
+  """
+  An object where the defined keys will be set on the `FooGenus` being updated.
+  """
+  patch: FooGenusPatch!
+  id: Int!
 }
 
 """
@@ -804,205 +887,203 @@
 """
 type Mutation {
   """Creates a single `Beverage`."""
-  createBeverage(
+  beverageCreate(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: CreateBeverageInput!
-  ): CreateBeveragePayload
+    input: BeverageCreateInput!
+  ): BeverageCreatePayload
 
   """Creates a single `Company`."""
-  createCompany(
+  companyCreate(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: CreateCompanyInput!
-  ): CreateCompanyPayload
+    input: CompanyCreateInput!
+  ): CompanyCreatePayload
 
   """Creates a single `Fish`."""
-  createFish(
+  fishCreate(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: CreateFishInput!
-  ): CreateFishPayload
+    input: FishCreateInput!
+  ): FishCreatePayload
 
-  """Creates a single `FooGenera`."""
-  createFooGenera(
+  """Creates a single `FooGenus`."""
+  fooGenusCreate(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: CreateFooGeneraInput!
-  ): CreateFooGeneraPayload
+    input: FooGenusCreateInput!
+  ): FooGenusCreatePayload
 
   """Creates a single `Pond`."""
-  createPond(
+  pondCreate(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: CreatePondInput!
-  ): CreatePondPayload
+    input: PondCreateInput!
+  ): PondCreatePayload
 
   """Updates a single `Beverage` using its globally unique id and a patch."""
-  updateBeverage(
+  beverageUpdateByNodeId(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: UpdateBeverageInput!
+    input: BeverageUpdateByNodeIdInput!
   ): UpdateBeveragePayload
 
   """Updates a single `Beverage` using a unique key and a patch."""
-  updateBeverageById(
+  beverageUpdate(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: UpdateBeverageByIdInput!
+    input: BeverageUpdateInput!
   ): UpdateBeveragePayload
 
   """Updates a single `Company` using its globally unique id and a patch."""
-  updateCompany(
+  companyUpdateByNodeId(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: UpdateCompanyInput!
+    input: CompanyUpdateByNodeIdInput!
   ): UpdateCompanyPayload
 
   """Updates a single `Company` using a unique key and a patch."""
-  updateCompanyById(
+  companyUpdate(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: UpdateCompanyByIdInput!
+    input: CompanyUpdateInput!
   ): UpdateCompanyPayload
 
   """Updates a single `Fish` using its globally unique id and a patch."""
-  updateFish(
+  fishUpdateByNodeId(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: UpdateFishInput!
+    input: FishUpdateByNodeIdInput!
   ): UpdateFishPayload
 
   """Updates a single `Fish` using a unique key and a patch."""
-  updateFishById(
+  fishUpdate(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: UpdateFishByIdInput!
+    input: FishUpdateInput!
   ): UpdateFishPayload
 
-  """
-  Updates a single `FooGenera` using its globally unique id and a patch.
-  """
-  updateFooGenera(
+  """Updates a single `FooGenus` using its globally unique id and a patch."""
+  fooGenusUpdateByNodeId(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: UpdateFooGeneraInput!
-  ): UpdateFooGeneraPayload
+    input: FooGenusUpdateByNodeIdInput!
+  ): UpdateFooGenusPayload
 
-  """Updates a single `FooGenera` using a unique key and a patch."""
-  updateFooGeneraById(
+  """Updates a single `FooGenus` using a unique key and a patch."""
+  fooGenusUpdate(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: UpdateFooGeneraByIdInput!
-  ): UpdateFooGeneraPayload
+    input: FooGenusUpdateInput!
+  ): UpdateFooGenusPayload
 
   """Updates a single `Pond` using its globally unique id and a patch."""
-  updatePond(
+  pondUpdateByNodeId(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: UpdatePondInput!
+    input: PondUpdateByNodeIdInput!
   ): UpdatePondPayload
 
   """Updates a single `Pond` using a unique key and a patch."""
-  updatePondById(
+  pondUpdate(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: UpdatePondByIdInput!
+    input: PondUpdateInput!
   ): UpdatePondPayload
 
   """Deletes a single `Beverage` using its globally unique id."""
-  deleteBeverage(
+  beverageDeleteByNodeId(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: DeleteBeverageInput!
+    input: BeverageDeleteByNodeIdInput!
   ): DeleteBeveragePayload
 
   """Deletes a single `Beverage` using a unique key."""
-  deleteBeverageById(
+  beverageDelete(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: DeleteBeverageByIdInput!
+    input: BeverageDeleteInput!
   ): DeleteBeveragePayload
 
   """Deletes a single `Company` using its globally unique id."""
-  deleteCompany(
+  companyDeleteByNodeId(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: DeleteCompanyInput!
+    input: CompanyDeleteByNodeIdInput!
   ): DeleteCompanyPayload
 
   """Deletes a single `Company` using a unique key."""
-  deleteCompanyById(
+  companyDelete(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: DeleteCompanyByIdInput!
+    input: CompanyDeleteInput!
   ): DeleteCompanyPayload
 
   """Deletes a single `Fish` using its globally unique id."""
-  deleteFish(
+  fishDeleteByNodeId(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: DeleteFishInput!
+    input: FishDeleteByNodeIdInput!
   ): DeleteFishPayload
 
   """Deletes a single `Fish` using a unique key."""
-  deleteFishById(
+  fishDelete(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: DeleteFishByIdInput!
+    input: FishDeleteInput!
   ): DeleteFishPayload
 
-  """Deletes a single `FooGenera` using its globally unique id."""
-  deleteFooGenera(
+  """Deletes a single `FooGenus` using its globally unique id."""
+  fooGenusDeleteByNodeId(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: DeleteFooGeneraInput!
-  ): DeleteFooGeneraPayload
+    input: FooGenusDeleteByNodeIdInput!
+  ): DeleteFooGenusPayload
 
-  """Deletes a single `FooGenera` using a unique key."""
-  deleteFooGeneraById(
+  """Deletes a single `FooGenus` using a unique key."""
+  fooGenusDelete(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: DeleteFooGeneraByIdInput!
-  ): DeleteFooGeneraPayload
+    input: FooGenusDeleteInput!
+  ): DeleteFooGenusPayload
 
   """Deletes a single `Pond` using its globally unique id."""
-  deletePond(
+  pondDeleteByNodeId(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: DeletePondInput!
+    input: PondDeleteByNodeIdInput!
   ): DeletePondPayload
 
   """Deletes a single `Pond` using a unique key."""
-  deletePondById(
+  pondDelete(
     """
     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
     """
-    input: DeletePondByIdInput!
+    input: PondDeleteInput!
   ): DeletePondPayload
 }
 
@@ -1038,7 +1119,7 @@
   name: String!
 
   """Reads and enables pagination through a set of `Fish`."""
-  fishByPondId(
+  fishes(
     """Only read the first `n` values of the set."""
     first: Int
 
@@ -1078,6 +1159,59 @@
   name: String
 }
 
+"""All input for the create `Pond` mutation."""
+input PondCreateInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
+
+  """The `Pond` to be created by this mutation."""
+  pond: PondInput!
+}
+
+"""The output of our create `Pond` mutation."""
+type PondCreatePayload {
+  """
+  The exact same `clientMutationId` that was provided in the mutation input,
+  unchanged and unused. May be used by a client to track mutations.
+  """
+  clientMutationId: String
+
+  """The `Pond` that was created by this mutation."""
+  pond: Pond
+
+  """
+  Our root query field type. Allows us to run any query from our mutation payload.
+  """
+  query: Query
+}
+
+"""All input for the `pondDeleteByNodeId` mutation."""
+input PondDeleteByNodeIdInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
+
+  """
+  The globally unique `ID` which will identify a single `Pond` to be deleted.
+  """
+  nodeId: ID!
+}
+
+"""All input for the `pondDelete` mutation."""
+input PondDeleteInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
+  id: Int!
+}
+
 """An input for mutations affecting `Pond`"""
 input PondInput {
   id: Int
@@ -1103,6 +1237,40 @@
   PRIMARY_KEY_DESC
 }
 
+"""All input for the `pondUpdateByNodeId` mutation."""
+input PondUpdateByNodeIdInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
+
+  """
+  The globally unique `ID` which will identify a single `Pond` to be updated.
+  """
+  nodeId: ID!
+
+  """
+  An object where the defined keys will be set on the `Pond` being updated.
+  """
+  patch: PondPatch!
+}
+
+"""All input for the `pondUpdate` mutation."""
+input PondUpdateInput {
+  """
+  An arbitrary string value with no semantic meaning. Will be included in the
+  payload verbatim. May be used to track mutations by the client.
+  """
+  clientMutationId: String
+
+  """
+  An object where the defined keys will be set on the `Pond` being updated.
+  """
+  patch: PondPatch!
+  id: Int!
+}
+
 """The root query type which gives access points into the data universe."""
 type Query implements Node {
   """
@@ -1123,7 +1291,7 @@
   ): Node
 
   """Reads and enables pagination through a set of `Beverage`."""
-  allBeverages(
+  beverages(
     """Only read the first `n` values of the set."""
     first: Int
 
@@ -1152,7 +1320,7 @@
   ): BeveragesConnection
 
   """Reads and enables pagination through a set of `Company`."""
-  allCompanies(
+  companies(
     """Only read the first `n` values of the set."""
     first: Int
 
@@ -1181,7 +1349,7 @@
   ): CompaniesConnection
 
   """Reads and enables pagination through a set of `Fish`."""
-  allFish(
+  fishes(
     """Only read the first `n` values of the set."""
     first: Int
 
@@ -1209,8 +1377,8 @@
     condition: FishCondition
   ): FishConnection
 
-  """Reads and enables pagination through a set of `FooGenera`."""
-  allFooGeneras(
+  """Reads and enables pagination through a set of `FooGenus`."""
+  fooGenera(
     """Only read the first `n` values of the set."""
     first: Int
 
@@ -1229,17 +1397,17 @@
     """Read all values in the set after (below) this cursor."""
     after: Cursor
 
-    """The method to use when ordering `FooGenera`."""
-    orderBy: [FooGenerasOrderBy!] = [PRIMARY_KEY_ASC]
+    """The method to use when ordering `FooGenus`."""
+    orderBy: [FooGeneraOrderBy!] = [PRIMARY_KEY_ASC]
 
     """
     A condition to be used in determining which values should be returned by the collection.
     """
-    condition: FooGeneraCondition
-  ): FooGenerasConnection
+    condition: FooGenusCondition
+  ): FooGeneraConnection
 
   """Reads a set of `Pond`."""
-  allPondsList(
+  ponds(
     """Only read the first `n` values of the set."""
     first: Int
 
@@ -1254,79 +1422,43 @@
     """
     condition: PondCondition
   ): [Pond!]
-  beverageById(id: Int!): Beverage
-  companyById(id: Int!): Company
-  fishById(id: Int!): Fish
-  fooGeneraById(id: Int!): FooGenera
-  pondById(id: Int!): Pond
+  beverage(id: Int!): Beverage
+  company(id: Int!): Company
+  fish(id: Int!): Fish
+  fooGenus(id: Int!): FooGenus
+  pond(id: Int!): Pond
 
   """Reads a single `Beverage` using its globally unique `ID`."""
-  beverage(
+  beverageByNodeId(
     """The globally unique `ID` to be used in selecting a single `Beverage`."""
     nodeId: ID!
   ): Beverage
 
   """Reads a single `Company` using its globally unique `ID`."""
-  company(
+  companyByNodeId(
     """The globally unique `ID` to be used in selecting a single `Company`."""
     nodeId: ID!
   ): Company
 
   """Reads a single `Fish` using its globally unique `ID`."""
-  fish(
+  fishByNodeId(
     """The globally unique `ID` to be used in selecting a single `Fish`."""
     nodeId: ID!
   ): Fish
 
-  """Reads a single `FooGenera` using its globally unique `ID`."""
-  fooGenera(
-    """
-    The globally unique `ID` to be used in selecting a single `FooGenera`.
-    """
+  """Reads a single `FooGenus` using its globally unique `ID`."""
+  fooGenusByNodeId(
+    """The globally unique `ID` to be used in selecting a single `FooGenus`."""
     nodeId: ID!
-  ): FooGenera
+  ): FooGenus
 
   """Reads a single `Pond` using its globally unique `ID`."""
-  pond(
+  pondByNodeId(
     """The globally unique `ID` to be used in selecting a single `Pond`."""
     nodeId: ID!
   ): Pond
 }
 
-"""All input for the `updateBeverageById` mutation."""
-input UpdateBeverageByIdInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-
-  """
-  An object where the defined keys will be set on the `Beverage` being updated.
-  """
-  beveragePatch: BeveragePatch!
-  id: Int!
-}
-
-"""All input for the `updateBeverage` mutation."""
-input UpdateBeverageInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-
-  """
-  The globally unique `ID` which will identify a single `Beverage` to be updated.
-  """
-  nodeId: ID!
-
-  """
-  An object where the defined keys will be set on the `Beverage` being updated.
-  """
-  beveragePatch: BeveragePatch!
-}
-
 """The output of our update `Beverage` mutation."""
 type UpdateBeveragePayload {
   """
@@ -1344,10 +1476,10 @@
   query: Query
 
   """Reads a single `Company` that is related to this `Beverage`."""
-  companyByCompanyId: Company
+  company: Company
 
   """Reads a single `Company` that is related to this `Beverage`."""
-  companyByDistributorId: Company
+  distributor: Company
 
   """An edge for our `Beverage`. May be used by Relay 1."""
   beverageEdge(
@@ -1356,40 +1488,6 @@
   ): BeveragesEdge
 }
 
-"""All input for the `updateCompanyById` mutation."""
-input UpdateCompanyByIdInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-
-  """
-  An object where the defined keys will be set on the `Company` being updated.
-  """
-  companyPatch: CompanyPatch!
-  id: Int!
-}
-
-"""All input for the `updateCompany` mutation."""
-input UpdateCompanyInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-
-  """
-  The globally unique `ID` which will identify a single `Company` to be updated.
-  """
-  nodeId: ID!
-
-  """
-  An object where the defined keys will be set on the `Company` being updated.
-  """
-  companyPatch: CompanyPatch!
-}
-
 """The output of our update `Company` mutation."""
 type UpdateCompanyPayload {
   """
@@ -1413,40 +1511,6 @@
   ): CompaniesEdge
 }
 
-"""All input for the `updateFishById` mutation."""
-input UpdateFishByIdInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-
-  """
-  An object where the defined keys will be set on the `Fish` being updated.
-  """
-  fishPatch: FishPatch!
-  id: Int!
-}
-
-"""All input for the `updateFish` mutation."""
-input UpdateFishInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-
-  """
-  The globally unique `ID` which will identify a single `Fish` to be updated.
-  """
-  nodeId: ID!
-
-  """
-  An object where the defined keys will be set on the `Fish` being updated.
-  """
-  fishPatch: FishPatch!
-}
-
 """The output of our update `Fish` mutation."""
 type UpdateFishPayload {
   """
@@ -1464,7 +1528,7 @@
   query: Query
 
   """Reads a single `Pond` that is related to this `Fish`."""
-  pondByPondId: Pond
+  pond: Pond
 
   """An edge for our `Fish`. May be used by Relay 1."""
   fishEdge(
@@ -1473,95 +1537,27 @@
   ): FishEdge
 }
 
-"""All input for the `updateFooGeneraById` mutation."""
-input UpdateFooGeneraByIdInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-
-  """
-  An object where the defined keys will be set on the `FooGenera` being updated.
-  """
-  fooGeneraPatch: FooGeneraPatch!
-  id: Int!
-}
-
-"""All input for the `updateFooGenera` mutation."""
-input UpdateFooGeneraInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-
-  """
-  The globally unique `ID` which will identify a single `FooGenera` to be updated.
-  """
-  nodeId: ID!
-
-  """
-  An object where the defined keys will be set on the `FooGenera` being updated.
-  """
-  fooGeneraPatch: FooGeneraPatch!
-}
-
-"""The output of our update `FooGenera` mutation."""
-type UpdateFooGeneraPayload {
+"""The output of our update `FooGenus` mutation."""
+type UpdateFooGenusPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String
 
-  """The `FooGenera` that was updated by this mutation."""
-  fooGenera: FooGenera
+  """The `FooGenus` that was updated by this mutation."""
+  fooGenus: FooGenus
 
   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query
 
-  """An edge for our `FooGenera`. May be used by Relay 1."""
-  fooGeneraEdge(
-    """The method to use when ordering `FooGenera`."""
-    orderBy: [FooGenerasOrderBy!] = PRIMARY_KEY_ASC
-  ): FooGenerasEdge
-}
-
-"""All input for the `updatePondById` mutation."""
-input UpdatePondByIdInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-
-  """
-  An object where the defined keys will be set on the `Pond` being updated.
-  """
-  pondPatch: PondPatch!
-  id: Int!
-}
-
-"""All input for the `updatePond` mutation."""
-input UpdatePondInput {
-  """
-  An arbitrary string value with no semantic meaning. Will be included in the
-  payload verbatim. May be used to track mutations by the client.
-  """
-  clientMutationId: String
-
-  """
-  The globally unique `ID` which will identify a single `Pond` to be updated.
-  """
-  nodeId: ID!
-
-  """
-  An object where the defined keys will be set on the `Pond` being updated.
-  """
-  pondPatch: PondPatch!
+  """An edge for our `FooGenus`. May be used by Relay 1."""
+  fooGenusEdge(
+    """The method to use when ordering `FooGenus`."""
+    orderBy: [FooGeneraOrderBy!] = PRIMARY_KEY_ASC
+  ): FooGeneraEdge
 }
 
 """The output of our update `Pond` mutation."""
